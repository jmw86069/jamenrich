% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-sets.r
\name{list2im}
\alias{list2im}
\title{convert list to incidence matrix}
\usage{
list2im(x, makeUnique = TRUE, keepCounts = TRUE, verbose = FALSE,
  ...)
}
\arguments{
\item{x}{list of vectors}

\item{makeUnique}{boolean indicating whether to enforce uniqueness on each
vector in the list. For an extremely long list, the uniqueness step can
become the rate-limiting step, and yet the function used to coerce list
to matrix requires each vector have a unique set of items. When
\code{makeUnique=FALSE]} the value returned depends upon
\code{keepCounts} which optionally reports the frequency of each
item.}

\item{keepCounts}{boolean indicating whether to return values indicating
the number of occurrences of each item, only useful when
\code{makeUnique=FALSE}.}

\item{verbose}{boolean indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}
}
\value{
numeric matrix whose rownames were vector items of the input list,
and whole colnames were list names.
}
\description{
convert list to incidence matrix
}
\details{
This function converts a list of vectors into an incidence matrix, where
the rows are the vector items and the columns are the list names.
It uses an object from the \code{\line{arules}} package called
\code{\link[arules]{transactions}} which offers highly efficient methods
for interconverting from list to matrix. The
\code{\link[arules]{transactions}} class is itself an enhanced data matrix,
which stores data using sparse matrix object type from the
\code{\link{Matrix}} package, but also associates a data.frame to both
the rows and columns of the matrix to offer additional row and column
annotation, as needed.

Performance benchmarks showed high speed of converting a list to a matrix,
but also that the resulting matrix was substantially smaller (5-20 times)
then comparable methods producing a data matrix.
}
\examples{
L1 <- list(A=c("C","A","B","A"),
   D=c("D","E","F","D"),
   A123=c(1:8,3,5),
   T=LETTERS[7:9]);
# Default behavior is to make items unique
list2im(L1);

# When not using unique entries, by default it reports the counts
list2im(L1, makeUnique=FALSE);

# The highest efficiency is seen when makeUnique=FALSE, keepCounts=FALSE,
# however the difference is seen typically only with lists longer
# than 10,000.
list2im(L1, makeUnique=FALSE, keepCounts=FALSE);

}
