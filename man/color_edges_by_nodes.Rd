% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamenrich-igraph.r
\name{color_edges_by_nodes}
\alias{color_edges_by_nodes}
\title{Color igraph edges using node colors}
\usage{
color_edges_by_nodes(g, edge_alpha = NULL, ...)

color_edges_by_nodes(g, edge_alpha = NULL, ...)
}
\arguments{
\item{g}{\code{igraph} object that contains vertex node attribute \code{"color"}
as seen with \code{igraph::vertex_attr(g, "color")}.}

\item{edge_alpha}{\code{numeric} or \code{NULL}, where numeric value sets
the edge alpha transparency, where \code{edge_alpha=0} is completely
transparent, \code{edge_alpha=0.5} is 50\% transparent, and \code{edge_alpha=1}
is completely not transparent, and is opaque. When \code{edge_alpha=NULL}
the alpha values are supplied by \code{colorjam::blend_colors()}
which blends the two values.}

\item{...}{additional arguments are passed to \code{colorjam::blend_colors()}.}

\item{alpha}{\code{NULL} or numeric vector with value between 0 and 1,
where 0 is transparent and 1 is non-transparent. When supplied,
this value is passed to \code{jamba::alpha2col()} to apply alpha
transparency to each edge color.}
}
\value{
\code{igraph} object with edge color attribute updated to
represent the result of blending node colors, seen by
\code{igraph::edge_attr(g)$color}.
}
\description{
Color igraph edges using node colors

Colorize igraph edges using node colors
}
\details{
This function uses the average color for the two nodes
involved in each edge, and applies that as the new edge color.

The color for each node depends upon the node shape, where
shape \code{"pie"} uses the average color from \code{"pie.color"}, and
shape \code{"coloredrectangle"} uses the avereage color from
\code{"coloredrect.color"}. Everything else uses \code{"color"}.

This function relies upon \code{avg_colors_by_list()} to
blend multiple colors together.

This function colorizes edges by blending colors for the
nodes involved, by calling \code{colorjam::blend_colors()}.
}
\seealso{
Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}

Other jam igraph functions: 
\code{\link{cnet2df}()},
\code{\link{cnet2im}()},
\code{\link{cnetplotJam}()},
\code{\link{cnetplot_internalJam}()},
\code{\link{drawEllipse}()},
\code{\link{edge_bundle_nodegroups}()},
\code{\link{enrichMapJam}()},
\code{\link{fixSetLabels}()},
\code{\link{get_bipartite_nodeset}()},
\code{\link{igraph2pieGraph}()},
\code{\link{jam_igraph}()},
\code{\link{jam_plot_igraph}()},
\code{\link{layout_with_qfrf}()},
\code{\link{layout_with_qfr}()},
\code{\link{memIM2cnet}()},
\code{\link{mem_multienrichplot}()},
\code{\link{rectifyPiegraph}()},
\code{\link{relayout_with_qfr}()},
\code{\link{removeIgraphBlanks}()},
\code{\link{removeIgraphSinglets}()},
\code{\link{reorderIgraphNodes}()},
\code{\link{rotate_igraph_layout}()},
\code{\link{spread_igraph_labels}()},
\code{\link{subgraph_jam}()},
\code{\link{subsetCnetIgraph}()},
\code{\link{subset_igraph_components}()},
\code{\link{with_qfr}()}
}
\concept{jam igraph functions}
